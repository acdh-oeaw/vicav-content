<profile when="2020_07_15_09_15_49" xml:id="dictProfile" xml:space="preserve">
<autoSwitchString>ar-x-DMG</autoSwitchString>
<basexRest>https://vicav.acdh-ch-dev.oeaw.ac.at</basexRest>
<displayString>/concat(
(tei:form[1]/tei:orth[@xml:lang="ar-x-DMG"])[1],
(tei:quote[@xml:lang="ar-x-DMG"])[1],
" [",
(tei:gramGrp[1]/tei:gram[@type="pos"])[1],
"]"
)</displayString>
<displayXPaths>[Exclude]:    entry/fs[@type="change"]/f/symbol
[Exclude]:    cit[@type="example"]/fs[@type="change"]/f/symbol
[Exclude]:    entry/fs[@type="create"]/f/symbol
[Exclude]:    entry/sense/gramGrp
[Exclude]:    entry/sense/cit[@type="translation"][@xml:lang="de"]
[Exclude]:    entry/sense/ptr[@type="example"]
[Exclude]:    cit[@type="example"]/fs[@type="create"]/f/symbol
********************************************************************************
********************************************************************************
********************************************************************************

ID:           entry/@xml:id {bg=rgb(233,233,233);color=rgb(0,0,160);lb_align=right;lb_bg=rgb(255,255,255);lb_weight=bold;width=200}
ID:           cit[@type="example"]/@xml:id {bg=rgb(0,0,0);color=rgb(255,255,255);lb_align=right;lb_bg=rgb(153,204,255);width=200;lb_weight=bold}
Type:         entry/form[@type="multiWordUnit"]/@type {bg=rgb(233,233,233);color=rgb(0,0,160);lb_align=right;lb_bg=rgb(255,255,255);lb_weight=bold;width=200}
Type:         entry/form[@type="lemma"]/@type {bg=rgb(233,233,233);color=rgb(0,0,160);lb_align=right;lb_bg=rgb(255,255,255);lb_weight=bold;width=200}

Lemma (DMG):  entry/form[@type="lemma"]/orth[@xml:lang="ar-x-DMG"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Lemma (ar):   entry/form[@type="lemma"]/orth[@xml:lang="ar"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
MWU (DMG):    entry/form[@type="multiWordUnit"]/orth[@xml:lang="ar-x-DMG"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
MWU (ar):     entry/form[@type="multiWordUnit"]/orth[@xml:lang="ar"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Var (DMG):    entry/form[@type="lemmaVariant"]/orth[@xml:lang="ar-x-DMG"] {bg=rgb(233,233,233);color=rgb(0,0,160);lb_align=right;lb_bg=rgb(255,255,255);lb_weight=bold;width=200}
Var (ar):     entry/form[@type="lemmaVariant"]/orth[@xml:lang="ar"] {bg=rgb(233,233,233);color=rgb(0,0,160);lb_align=right;lb_bg=rgb(255,255,255);lb_weight=bold;width=200}

POS:          entry/gramGrp/gram[@type="pos"] {lb_align=right;left=20;width=100;lb_weight=bold}
Gender:       entry/gramGrp/gram[@type="gender"] {lb_align=right;left=20;width=100;lb_weight=bold}
Subcat:       entry/gramGrp/gram[@type="subc"] {lb_align=right;left=20;width=100;lb_weight=bold}
Subj. pref.:  entry/gramGrp/gram[@type="subPref"] {lb_align=right;left=20;width=100;lb_weight=bold}

Root (DMG):   entry/gramGrp/gram[@type="root"][@xml:lang="ar-x-DMG"] {lb_align=right;left=20;width=100;lb_weight=bold}
Root (ar):    entry/gramGrp/gram[@type="root"][@xml:lang="ar"] {lb_align=right;left=20;width=100;lb_weight=bold}

Bibl.:        entry/form[@type="lemma"]/bibl[@type="course"] {bg=rgb(192,255,130);lb_align=right;lb_weight=bold;left=20}
Bibl.:        entry/form[@type="multiWordUnit"]/bibl[@type="course"] {bg=rgb(192,255,130);lb_align=right;lb_weight=bold;left=20}
Bibl.:        entry/form[@type="lemma"]/bibl {bg=rgb(192,255,130);lb_align=right;lb_weight=bold;left=20}


Infl. (UN.,DMG):   entry/form[@ana="#n_unit"][@type="inflected"]/orth[@xml:lang="ar-x-DMG"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (NU.,ar):    entry/form[@ana="#n_unit"][@type="inflected"]/orth[@xml:lang="ar"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}

Infl. (Pl.,DMG):   entry/form[@ana="#n_pl"][@type="inflected"]/orth[@xml:lang="ar-x-DMG"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (Pl.,ar):    entry/form[@ana="#n_pl"][@type="inflected"]/orth[@xml:lang="ar"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}

Infl. (Pl.,DMG):   entry/form[@ana="#a_pl"][@type="inflected"]/orth[@xml:lang="ar-x-DMG"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (Pl.,ar):    entry/form[@ana="#a_pl"][@type="inflected"]/orth[@xml:lang="ar"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}

Infl. (Pl2.,DMG):   entry/form[@ana="#n_diptPl"][@type="inflected"]/orth[@xml:lang="ar-x-DMG"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (Pl2.,ar):    entry/form[@ana="#n_diptPl"][@type="inflected"]/orth[@xml:lang="ar"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}

Infl. (fem.,DMG):   entry/form[@ana="#a_f"][@type="inflected"]/orth[@xml:lang="ar-x-DMG"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (fem.,ar):    entry/form[@ana="#a_f"][@type="inflected"]/orth[@xml:lang="ar"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}

Infl. (fem.,DMG):   entry/form[@ana="#a_f_dipt"][@type="inflected"]/orth[@xml:lang="ar-x-DMG"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (fem.,ar):    entry/form[@ana="#a_f_dipt"][@type="inflected"]/orth[@xml:lang="ar"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}

Infl. (Pres.,DMG): entry/form[@ana="#v_pres_sg_p3"][@type="inflected"]/orth[@xml:lang="ar-x-DMG"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (Pres.,ar):  entry/form[@ana="#v_pres_sg_p3"][@type="inflected"]/orth[@xml:lang="ar"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}

Infl. (VN, DMG):   entry/form[@ana="#v_vn"][@type="inflected"]/orth[@xml:lang="ar-x-DMG"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}
Infl. (VN, ar):    entry/form[@ana="#v_vn"][@type="inflected"]/orth[@xml:lang="ar"] {bg=rgb(255,255,153);color=rgb(0,0,0);lb_align=right;lb_bg=rgb(255,255,153);lb_weight=bold;left=20}

Dom.:              entry/sense/usg[@type="dom"] {lb_align=right;lb_weight=bold;left=20}
Sense (de):        entry/sense/cit[@type="translation"][@xml:lang="de"]/quote {bg=rgb(135,204,253);lb_align=right;lb_bg=rgb(135,204,253);lb_weight=bold}
Sense (en):        entry/sense/cit[@type="translation"][@xml:lang="en"]/quote {bg=rgb(223,204,250);lb_align=right;lb_bg=rgb(223,204,250);lb_weight=bold}

Usg.:              entry/sense/cit[@type="translation"][@xml:lang="en"]/usg[@type="hint"] {lb_align=right;lb_weight=bold;left=20}
Usg.:              entry/sense/cit[@type="translation"][@xml:lang="de"]/usg[@type="hint"] {lb_align=right;lb_weight=bold;left=20}
Usg.:              entry/sense/usg[@xml:lang="en"] {lb_align=right;lb_weight=bold;left=20}

Arg.:         entry/sense/gramGrp/gram[@type="arguments"][@xml:lang="ar-x-DMG"] {lb_align=right;lb_weight=bold;left=20}

Example ref.: entry/sense/ptr[@type="example"]/@target {lb_align=right;lb_weight=bold;left=20}

Note:         entry/note[@type="unparsed"] {lb_align=right;lb_weight=bold}

Example (DMG): cit[@type="example"]/quote[@xml:lang="ar-x-DMG"]
Example (ar):  cit[@type="example"]/quote[@xml:lang="ar"]
Example (De):  cit[@type="example"]/cit[@type="translation"][@xml:lang="de"]/quote
Example (Eng): cit[@type="example"]/cit[@type="translation"][@xml:lang="en"]/quote</displayXPaths>
<entryStyle>
<xsl:stylesheet xml:space="preserve" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns="http://www.w3.org/1999/xhtml" xmlns:tei="http://www.tei-c.org/ns/1.0" version="1.0">
   <xsl:output method="html"/>
   <xsl:template match="/">
      <div>
         <div class="dvStats" id="dvStats">
            <xsl:variable name="recNum"><xsl:value-of select="count(//tei:entry)"/></xsl:variable>
            <xsl:value-of select="$recNum"/> hits
         </div>
         <!-- ********************************************* -->
         <!-- ***  ENTRY ********************************** -->
         <!-- ********************************************* -->
         <xsl:for-each select="//tei:div[@type='entry']/tei:entry">
            <xsl:sort select="./tei:form/tei:orth"/>
            <div class="dvRoundLemmaBox_ltr">
               <xsl:value-of select="tei:form[@type='lemma']/tei:orth[@xml:lang='ar-x-DMG'] | &#xA;                                tei:form[@type='multiWordUnit']/tei:orth[@xml:lang='ar-x-DMG'] | &#xA;                                tei:form[@type='abbrev']/tei:orth[@xml:lang='ar-x-DMG']"/>
               <xsl:if test="tei:gramGrp/tei:gram[@type='pos']">
                  <span class="spGramGrp">
                     <xsl:text> </xsl:text>
                     (
                     <xsl:choose>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='activeParticiple'">act. part.</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='collectiveNoun'">coll. noun</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='commonNoun'">common noun</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='compPreposition'">comp. preposition</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='demonstrativePronoun'">dem. pronoun</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='dualNoun'">dual</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='existentialMarker'">existential marker</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='genitiveMarker'">gen. marker</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='interrogativeAdverb'">int. adverb</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='multiwordunit'">multiword unit</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='negParticle'">neg. particle</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='ordinalAdjective'">ord. adj.</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='ordNum'">ord. num.</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='particle'">particle</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='passiveParticiple'">pass. part.</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='personalPronoun'">pers. pronoun</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='pluralNoun'">plural noun</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='properNoun'">proper noun</xsl:when>
                        <xsl:when test="tei:gramGrp/tei:gram[@type='pos']='responseParticle'">response particle</xsl:when>


                        <xsl:otherwise><xsl:value-of select="tei:gramGrp/tei:gram[@type='pos']"/></xsl:otherwise>
                     </xsl:choose>
                     <xsl:if test="tei:gramGrp/tei:gram[@type='gender']='feminine'">; fem.</xsl:if>
                     <xsl:if test="tei:gramGrp/tei:gram[@type='subc']">;  <xsl:value-of select="tei:gramGrp/tei:gram[@type='subc']"/></xsl:if>
                     )
                  </span>
               </xsl:if>
               <!-- ********************************************* -->
               <!-- ****************  ROOT  ********************* -->
               <!-- ********************************************* -->
               <xsl:if test="string-length(./tei:gramGrp/tei:gram[@type='root'])&gt;0 and not(contains(./tei:gramGrp/tei:gram[@type='root'], ' '))">
                  <span class="spRoot">
                     <xsl:if test="not(tei:etym)">    [<xsl:value-of select="./tei:gramGrp/tei:gram[@type='root']"/>]</xsl:if>
                  </span>
               </xsl:if>
            </div>
            <table class="tbEntry">
               <xsl:for-each select="tei:form[@type='lemma'] | tei:form[@type='multiWordUnit'] ">
                  <!-- ********************************************* -->
                  <!-- ***  VARIANTS OF LEMMA  ********************* -->
                  <!-- ********************************************* -->
                  <xsl:if test="./tei:form[@type='variant']">
                     <tr>
                        <td class="tdHead">Var.</td>
                        <td class="tdKWICMain">
                           <xsl:for-each select="./tei:form[@type='variant']">
                              <xsl:if test="position()&gt;1">, </xsl:if>
                              <xsl:if test="tei:orth[@xml:lang='ar-x-DMG']">
                                 <xsl:value-of select="tei:orth[@xml:lang='ar-x-DMG']"/>
                                 <xsl:if test="tei:usg"><span class="spGramGrp"><xsl:text> </xsl:text>(<xsl:value-of select="tei:usg"/>)</span></xsl:if>
                              </xsl:if>
                              <xsl:if test="tei:bibl">
                                 <span class="spBibl">
                                     (<xsl:for-each select="tei:bibl"><xsl:if test="position()&gt;1">;<xsl:text> </xsl:text></xsl:if>
                                       <xsl:value-of select="."/>
                                    </xsl:for-each>)
                                 </span>
                              </xsl:if>
                           </xsl:for-each>
                        </td>
                     </tr>
                  </xsl:if>
               </xsl:for-each>
               <!-- ********************************************* -->
               <!-- ***  ETYMOLOGY ****************************** -->
               <!-- ********************************************* -->
               <xsl:if test="string-length(tei:etym)&gt;0">
                  <tr>
                     <td class="tdHead">Etym.</td>
                     <td class="tdKWICMain">
                        <span class="spEtym">
                           <xsl:for-each select="tei:etym">
                              <xsl:text>&lt; </xsl:text>
                              <xsl:if test="tei:mentioned">
                                 <xsl:value-of select="tei:mentioned"/>
                              </xsl:if>
                              <xsl:if test="tei:lang">
                                  (<xsl:value-of select="tei:lang"/>)
                              </xsl:if>
                           </xsl:for-each>
                        </span>
                     </td>
                  </tr>
               </xsl:if>
               <!-- ********************************************* -->
               <!-- ***  INFLECTED FORMS (Pls, etc.) ************ -->
               <!-- ********************************************* -->
               <xsl:if test="string-length(tei:form[@type='inflected']/tei:orth/text())&gt;0">
                  <tr>
                     <td class="tdHead">Inflected</td>
                     <td class="tdKWICMain">
                        <xsl:for-each select="tei:form[@type='inflected']">
                           <xsl:if test="string-length(tei:orth[@xml:lang='ar-x-DMG'])&gt;0">
                              <xsl:if test="position()&gt;1">,<xsl:text> </xsl:text></xsl:if>
                              <xsl:value-of select="tei:orth[@xml:lang='ar-x-DMG']"/>
                              <!-- ********************************************* -->
                              <!-- ***  ANA attributes   *********************** -->
                              <!-- ********************************************* -->
                              <xsl:if test="@ana">
                                 <span class="spGramGrp"><xsl:text> </xsl:text>
                                    <xsl:choose>
                                       <xsl:when test="@ana='#activeParticiple'">[act. part.]</xsl:when>
                                       <xsl:when test="@ana='#adj_elative'">[elative]</xsl:when>
                                       <xsl:when test="@ana='#adj_elative_f'">[elative, feminine]</xsl:when>
                                       <xsl:when test="@ana='#adj_f'">[feminine]</xsl:when>
                                       <xsl:when test="@ana='#adj_pl'">[plural]</xsl:when>
                                       <xsl:when test="@ana='#adj_sg_f'">[feminine, singular]</xsl:when>
                                       <xsl:when test="@ana='#ap_f'">[feminine]</xsl:when>
                                       <xsl:when test="@ana='#ap_m'">[masculine]</xsl:when>
                                       <xsl:when test="@ana='#ap_pl'">[plural]</xsl:when>
                                       <xsl:when test="@ana='#ap_sg_f'">[feminine]</xsl:when>
                                       <xsl:when test="@ana='#n_constructState'">[construct state]</xsl:when>
                                       <xsl:when test="@ana='#n_dual'">[dual]</xsl:when>
                                       <xsl:when test="@ana='#n_f'">[feminine]</xsl:when>
                                       <xsl:when test="@ana='#n_countpl'">[count plural]</xsl:when>
                                       <xsl:when test="@ana='#n_countPlural'">[count plural]</xsl:when>
                                       <xsl:when test="@ana='#n_diptPl'">[dipt. plural]</xsl:when>
                                       <xsl:when test="@ana='#n_pl'">[plural]</xsl:when>
                                       <xsl:when test="@ana='#n_unit'">[unit noun]</xsl:when>
                                       <xsl:when test="@ana='#n_unit_pl'">[unit noun plural]</xsl:when>
                                       <xsl:when test="@ana='#n_vn'">[verbal noun]</xsl:when>
                                       <xsl:when test="@ana='#p_f'">[feminine]</xsl:when>
                                       <xsl:when test="@ana='#p_pl'">[plural]</xsl:when>
                                       <xsl:when test="@ana='#passiveParticiple'">[pas. part.]</xsl:when>
                                       <xsl:when test="@ana='#pp_f'">[feminine]</xsl:when>
                                       <xsl:when test="@ana='#pp_pl'">[plural]</xsl:when>
                                       <xsl:when test="@ana='#pp_sg_f'">[feminine]</xsl:when>
                                       <xsl:when test="@ana='#pron_f'">[feminine]</xsl:when>
                                       <xsl:when test="@ana='#pron_pl'">[plural]</xsl:when>
                                       <xsl:when test="@ana='#v_ap_pl'">[plural]</xsl:when>
                                       <xsl:when test="@ana='#v_ap_sg_f'">[feminine]</xsl:when>
                                       <xsl:when test="@ana='#v_ap_sg_m'">[masculine]</xsl:when>
                                       <xsl:when test="@ana='#v_imp_pl'">[2.pl.imp.]</xsl:when>
                                       <xsl:when test="@ana='#v_imp_pl_2'">[2.pl.imp.]</xsl:when>
                                       <xsl:when test="@ana='#v_imp_sg_2_m'">[2.sg.m.imp.]</xsl:when>
                                       <xsl:when test="@ana='#v_imp_sg_2_f'">[2.sg.f.imp.]</xsl:when>
                                       <xsl:when test="@ana='#v_imp_sg_m'">[2.sg.m.imp.]</xsl:when>
                                       <xsl:when test="@ana='#v_imp_sg_f'">[2.sg.f.imp.]</xsl:when>
                                       <xsl:when test="@ana='#v_past_sg_p2'">[2.sg.past]</xsl:when>
                                       <xsl:when test="@ana='#v_pres_sg_p3'">[3.sg.pres.]</xsl:when>
                                       <xsl:when test="@ana='#v_pp'">[pas. part.]</xsl:when>
                                       <xsl:when test="@ana='#v_ap'">[act. part.]</xsl:when>
                                       <xsl:when test="@ana='#v_ap_m'">[masculine]</xsl:when>
                                       <xsl:when test="@ana='#v_ap_f'">[feminine]</xsl:when>
                                       <xsl:when test="@ana='#v_pp_m'">[masculine]</xsl:when>
                                       <xsl:when test="@ana='#v_pp_f'">[feminine]</xsl:when>
                                       <xsl:when test="@ana='#v_vn'">[verbal noun]</xsl:when>

                                       <xsl:otherwise>[<xsl:value-of select="@ana"/>]</xsl:otherwise>
                                    </xsl:choose>
                                 </span>
                              </xsl:if>
                              <!-- ********************************************* -->
                              <!-- ***  USG of infl.  ************************** -->
                              <!-- ********************************************* -->
                              <xsl:if test="tei:usg">
                                 (<xsl:value-of select="tei:usg"/>)
                              </xsl:if>
                           </xsl:if>
                        </xsl:for-each>
                     </td>
                  </tr>
               </xsl:if>
               <!-- ********************************************* -->
               <!-- ** SENSES *********************************** -->
               <!-- ********************************************* -->
               <xsl:for-each select="tei:sense">
                  <xsl:if test="./tei:def">
                     <tr>
                        <td class="tdHead">Defs.</td>
                        <td class="tdSense">
                           <div class="dvDef">
                              <xsl:for-each select="tei:def[@xml:lang='en'] | tei:def[@lang='en']">
                                 <xsl:if test="string-length(.)&gt;1">
                                    <span class="spTransEn">
                                       <xsl:if test="position()&gt;1">,<xsl:text> </xsl:text></xsl:if>
                                       <xsl:value-of select="."/>
                                    </span>
                                 </xsl:if>
                              </xsl:for-each>
                              <div class="dvLangSep">
                                 <xsl:for-each select="tei:def[@xml:lang='fr'] | tei:def[@lang='fr']">
                                    <xsl:if test="string-length(.)&gt;1">
                                       <span class="spTransFr">
                                          <xsl:if test="position()&gt;1">,<xsl:text> </xsl:text></xsl:if>
                                          <xsl:value-of select="."/>
                                       </span>
                                    </xsl:if>
                                 </xsl:for-each>
                              </div>
                              <div class="dvLangSep">
                                 <xsl:for-each select="tei:def[@xml:lang='de'] | tei:def[@lang='de']">
                                    <xsl:if test="string-length(.)&gt;1">
                                       <span class="spTransDe">
                                          <xsl:if test="position()&gt;1">,<xsl:text> </xsl:text></xsl:if>
                                          <xsl:value-of select="."/>
                                       </span>
                                    </xsl:if>
                                 </xsl:for-each>
                              </div>
                           </div>
                        </td>
                     </tr>
                  </xsl:if>
                  <tr>
                     <td class="tdHead">Sense
                        <xsl:if test="count(tei:sense)&gt;1"><xsl:text> </xsl:text>
                           <xsl:value-of select="position()"/>
                        </xsl:if>
                     </td>
                     <td class="tdSense">
                        <!-- ********************************************* -->
                        <!-- ** ARGUMENTS ******************************** -->
                        <!-- ********************************************* -->
                        <xsl:if test="tei:gramGrp/tei:gram[@type='arguments']">
                           <div class="dvDef">
                              <xsl:value-of select="parent::tei:form[@type='lemma']/tei:orth[@xml:lang='ar-x-DMG'] | parent::tei:form[@type='multiWordUnit']/tei:orth[@xml:lang='ar-x-DMG'] | parent::tei:form[@type='abbrev']/tei:orth[@xml:lang='ar-x-DMG']"/>
                              <span class="dvArguments"><xsl:value-of select="tei:gramGrp/tei:gram[@type='arguments']"/></span>
                           </div>
                        </xsl:if>
                        <div class="dvDef">
                           <xsl:for-each select="tei:cit[@type='translation'][@xml:lang='en']">
                              <xsl:if test="string-length(.)&gt;1">
                                 <span class="spTransEn">
                                    <xsl:if test="position()&gt;1">,<xsl:text> </xsl:text></xsl:if>
                                    <xsl:value-of select="tei:quote"/>
                                    <xsl:if test="tei:usg">
                                       (<xsl:value-of select="tei:usg"/>)
                                    </xsl:if>
                                 </span>
                              </xsl:if>
                           </xsl:for-each>
                           <!-- ********************************************* -->
                           <!-- ** USG ************************************** -->
                           <!-- ********************************************* -->
                           <xsl:if test="tei:usg[@xml:lang='en']">
                              <span class="dvUsg">(<xsl:value-of select="tei:usg[@xml:lang='en']"/>)</span>
                           </xsl:if>
                           <xsl:if test="count(tei:cit[@type='translation'][@xml:lang='de'])&gt;0">
                              <div class="dvLangSep">
                                 <xsl:for-each select="tei:cit[@type='translation'][@xml:lang='de']">
                                    <xsl:if test="string-length(.)&gt;1">
                                       <span class="spTransDe">
                                          <xsl:if test="position()&gt;1"><xsl:text>, </xsl:text></xsl:if>
                                          <xsl:value-of select="tei:quote"/>
                                          <xsl:if test="tei:usg">
                                             (<xsl:value-of select="tei:usg"/>)
                                          </xsl:if>
                                       </span>
                                    </xsl:if>
                                 </xsl:for-each>
                                 <xsl:if test="tei:usg[@xml:lang='de']">
                                    <span class="dvUsg">(<xsl:value-of select="tei:usg[@xml:lang='de']"/>)</span>
                                 </xsl:if>
                              </div>
                           </xsl:if>
                           <xsl:if test="count(tei:cit[@type='translation'][@xml:lang='fr'])&gt;0">
                              <div class="dvLangSep">
                                 <xsl:for-each select="tei:cit[@type='translation'][@xml:lang='fr']">
                                    <xsl:if test="string-length(.)&gt;1">
                                       <span class="spTransFr">
                                          <xsl:if test="position()&gt;1">,<xsl:text> </xsl:text></xsl:if>
                                          <xsl:value-of select="tei:quote"/>
                                          <xsl:if test="tei:usg">
                                             (<xsl:value-of select="tei:usg"/>)
                                          </xsl:if>
                                       </span>
                                    </xsl:if>
                                 </xsl:for-each>
                                 <xsl:if test="tei:usg[@xml:lang='fr']">
                                    <span class="dvUsg">(<xsl:value-of select="tei:usg[@xml:lang='fr']"/>)</span>
                                 </xsl:if>
                              </div>
                           </xsl:if>
                        </div>
                        <xsl:for-each select="tei:cit[@type='example']">
                           <div class="dvExamples">
                              <xsl:if test="tei:quote[@xml:lang='ar-x-DMG']">
                                 <xsl:value-of select="tei:quote[@xml:lang='ar-x-DMG']"/>
                              </xsl:if>
                              <xsl:for-each select="tei:cit[@type='translation'][@xml:lang='en']">
                                 <span class="spTransEn"><xsl:text> </xsl:text>
                                    <xsl:value-of select="tei:quote"/>
                                 </span>
                              </xsl:for-each>
                              <xsl:for-each select="tei:cit[@type='translation'][@xml:lang='de']">
                                 <span class="spTransDe"><xsl:text> </xsl:text>
                                    <xsl:value-of select="tei:quote"/>
                                 </span>
                              </xsl:for-each>
                           </div>
                        </xsl:for-each>
                        <xsl:for-each select="tei:cit[@type='multiWordUnit'][@xml:lang='ar-x-DMG']">
                           <div class="dvMWUExamples">
                              <table>
                                 <tr>
                                    <xsl:if test="tei:quote[@xml:lang='ar-x-DMG']">
                                       <td class="tdNoBorder">
                                          <xsl:value-of select="tei:quote[@xml:lang='ar-x-DMG']"/>
                                       </td>
                                    </xsl:if>
                                    <td class="tdNoBorder">
                                       <xsl:for-each select="tei:cit[@type='translation']">
                                          <div class="dvDef">
                                             <span class="spTrans">
                                                <xsl:value-of select="tei:quote[@xml:lang='ar-x-DMG']"/>
                                                <xsl:if test="tei:usg"><xsl:text> </xsl:text>
                                                   (<xsl:value-of select="tei:usg"/>)
                                                </xsl:if>
                                             </span>
                                          </div>
                                       </xsl:for-each>
                                    </td>
                                 </tr>
                              </table>
                           </div>
                        </xsl:for-each>
                        <xsl:for-each select="tei:entry[@type='example']">
                           <div class="dvMWUExamples">
                              <table>
                                 <tr>
                                    <xsl:if test="tei:form/tei:orth[@xml:lang='ar-x-DMG']">
                                       <td class="tdNoBorder">
                                          <xsl:value-of select="tei:form/tei:orth[@xml:lang='ar-x-DMG']"/>
                                       </td>
                                    </xsl:if>
                                    <td class="tdNoBorder">
                                       <xsl:for-each select="tei:sense">
                                          <div class="dvDef">
                                             <span class="spTrans">
                                                <xsl:value-of select="tei:cit/tei:quote[@xml:lang='ar-x-DMG']"/>
                                                <xsl:if test="tei:usg">
                                                   (<xsl:value-of select="tei:usg"/>)
                                                </xsl:if>
                                             </span>
                                          </div>
                                       </xsl:for-each>
                                    </td>
                                 </tr>
                              </table>
                           </div>
                        </xsl:for-each>
                     </td>
                  </tr>
               </xsl:for-each>
               <!-- ********************************************* -->
               <!-- ***** BIBL ********************************** -->
               <!-- ********************************************* -->
               <xsl:if test="tei:form[@type='lemma']/tei:bibl | tei:form[@type='multiWordUnit']/tei:bibl">
                  <tr width="200px">
                     <td class="tdHead">Refs.</td>
                     <td class="tdKWICMain">
                        <span class="spBibl" alt="References">
                           <xsl:for-each select="tei:form[@type='lemma']/tei:bibl | tei:form[@type='multiWordUnit']/tei:bibl">
                              <xsl:if test="position()&gt;1">;<xsl:text> </xsl:text></xsl:if>
                              <xsl:value-of select="."/>
                           </xsl:for-each>
                        </span>
                     </td>
                  </tr>
               </xsl:if>
               <!-- ********************************************* -->
               <!-- ** EDITORS ********************************** -->
               <!-- ********************************************* -->
               <tr>
                  <td class="tdHead">Editors</td>
                  <td class="tdKWICMain">
                     <span class="spEditors" alt="Editors">
                        <xsl:for-each select="parent::node()/tei:span[@type='editor']">
                           <xsl:sort select="."/>
                           <xsl:if test="position()&gt;1">,<xsl:text> </xsl:text></xsl:if>
                           <xsl:choose>
                              <xsl:when test=".='stephan'">S. Procházka</xsl:when>
                              <xsl:when test=".='inesd'">I. Dallaji</xsl:when>
                              <xsl:when test=".='inesg'">I. Gabsi</xsl:when>
                              <xsl:when test=".='gisela'">G. Kitzler</xsl:when>
                              <xsl:when test=".='ines2'">I. Ben Brahim</xsl:when>
                              <xsl:when test=".='omar1'">O. Siam</xsl:when>
                              <xsl:when test=".='bettina'">B. Leitner</xsl:when>
                              <xsl:when test=".='charly'">K. Moerth</xsl:when>
                              <xsl:when test=".='veronika'">V. Ritt-Benmimoun</xsl:when>
                              <xsl:otherwise><xsl:value-of select="."/></xsl:otherwise>
                           </xsl:choose>
                        </xsl:for-each>
                     </span>
                  </td>
               </tr>
            </table>
         </xsl:for-each>
      </div>
   </xsl:template>
</xsl:stylesheet>
</entryStyle>
<mainLangLabel>ar</mainLangLabel>
<multipleEntriesStyle><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tei="http://www.tei-c.org/ns/1.0" xmlns="http://www.w3.org/1999/xhtml" version="1.0">
    
    <xsl:output method="html"/>
    <xsl:template match="/">
        
        <html>
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
                <style type="text/css">
                    table {
                       border-collapse: collapse;
                    }
                    
                    td {
                       border: 1px solid black;q
                       padding-left: 5px;
                       vertical-align: top;
                    }
                </style>
            </head>
            <body>  
                <table>
                    <xsl:for-each select="//tei:entry">
                        <tr>
                            <td><xsl:value-of select="position()"/></td>
                            <td><xsl:value-of select="tei:form[@type='lemma']/tei:orth"/></td>
                            <td><xsl:value-of select="tei:gramGrp/tei:pos"/></td>
                            <td>
                                <xsl:for-each select="tei:sense">
                                    <xsl:value-of select="tei:cit[@type='translation']/tei:quote"/><br/>
                                </xsl:for-each>
                            </td>
                        </tr>    
                    </xsl:for-each>
                </table>    
            </body>
            
        </html>
    </xsl:template>
</xsl:stylesheet></multipleEntriesStyle>
<queryTemplates>

<!-- for public dictionaries it is assumed that there are no unreleased entries! -->
<!-- for subQuery .*x, x.* and .*x.* are replaced with ends-with(., x), starts-with(., x) and contains(., x) -->
<queryTemplate label="fuzzy">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/.//node()[text() contains text "{noSubstQuery}" using wildcards using diacritics insensitive using case insensitive] | 
   collection($__db__)//tei:cit[@type='example']/.//node()[text() contains text "{noSubstQuery}" using wildcards using diacritics insensitive using case insensitive]
</queryTemplate>

<queryTemplate label="anywhere">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/.//node()[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive] | 
   collection($__db__)//tei:cit[@type='example']/.//node()[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive]
</queryTemplate>

<queryTemplate label="lemma">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/tei:form[@type='lemma']/tei:orth[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive] |
   collection($__db__)//tei:entry/tei:form[@type='multiWordUnit']/tei:orth[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive]
</queryTemplate>

<queryTemplate label="example">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:cit[@type='example']/tei:quote[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive using language "ar" using stemming] |
   collection($__db__)//tei:cit[@type='example']/tei:cit/tei:quote[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive using language "ar" using stemming]  
</queryTemplate>

<queryTemplate label="sense">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/tei:sense/tei:cit/tei:quote[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive using language "en" using stemming]
</queryTemplate>

<queryTemplate label="note">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/tei:note[text() contains text "{noSubstQuery}" using wildcards using diacritics sensitive using case sensitive using language "en" using stemming]
</queryTemplate>

<queryTemplate label="sid">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/@xml:id[{subQuery}]/.. | 
   collection($__db__)//tei:teiHeader/@xml:id[{subQuery}]/.. | 
   collection($__db__)//tei:cit/@xml:id[{subQuery}]/.. 
</queryTemplate>

<queryTemplate label="pos">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry[tei:gramGrp/tei:gram[@type='pos'][{subQuery}]]
</queryTemplate>

<!-- Example: pos=noun, root=ktb -->
<queryTemplate label="root">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry[tei:gramGrp[tei:gram[@type='root'][{subQuery}]]]
</queryTemplate>

<queryTemplate label="subc">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry[tei:gramGrp/tei:gram[@type='subc'][{subQuery}]]
</queryTemplate>

<!-- To find punctuation marks: ;,-->
<queryTemplate label="sense phrase">
   declare namespace tei = 'http://www.tei-c.org/ns/1.0';
   declare variable $__db__ external;
   collection($__db__)//tei:entry/tei:sense/tei:cit/tei:quote[contains(., {subQuery})]
</queryTemplate>

                                                     
</queryTemplates>
<tableName label="dc_ar_en_publ">dc_ar_en_publ</tableName>
<specialCharacters><char><value>ˀ</value></char><char><value>ˁ</value></char><char><value>ā</value></char><char><value>ḍ</value></char><char><value>ḏ</value></char><char><value>ē</value></char><char><value>ġ</value></char><char><value>ǧ</value></char><char><value>ḥ</value></char><char><value>ī</value></char><char><value>ḷ</value></char><char><value>ṣ</value></char><char><value>s̠</value></char><char><value>š</value></char><char><value>ṭ</value></char><char><value>ṯ</value></char><char><value>ū</value></char><char><value>ẓ</value></char><char><value>ʔ</value></char></specialCharacters>
</profile>