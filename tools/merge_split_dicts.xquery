xquery version "3.0";

(: This script takes a skeleton TEI dictionary and resolves the 'include' processing instructions in it, producing a self-contained TEI document of the split dictionary. :)
(: Version 1 – DS 2019-08-29 :)

declare namespace tei = "http://www.tei-c.org/ns/1.0";
declare variable $dict-skel external;
(: TODO ideally namespaces should be taken from the the skeleton file :)
declare variable $local:ns := map {"tei" : "http://www.tei-c.org/ns/1.0"};
declare variable $caveatText := "AUTOMATICALLY GENERATED FILE – DO NOT EDIT.&#10; This file has been automatically generated by vicav_content/tools/merged_split_dicts.xquery – do not edit this file but use the current database version.";

declare function local:constructQuery($xpath as xs:string, $db-patterns as xs:string+){
  concat(
    for $n in map:keys($local:ns)
    return "declare namespace "||$n||"='"||$local:ns($n)||"';&#10;",
    for $db-name in db:list()[some $p in $db-patterns satisfies matches(.,$p)]
    return "db:open('"||$db-name||"')"||$xpath
  )
};

declare function local:handleIncludePi($i as processing-instruction()){
  let $matches := analyze-string($i, '(collection-name-regex|xpath)="(.+?)"')/fn:match
  let $xpath := $matches[fn:group[@nr='1']='xpath']//fn:group[@nr='2']//text()
  let $collection-name-regex := $matches[fn:group[@nr='1']='collection-name-regex']/fn:group[@nr='2']//text()
  let $query := local:constructQuery($xpath, $collection-name-regex)
  return xquery:eval($query)
};

declare function local:transform($item as node()) as item()*{
  typeswitch ($item)
    case processing-instruction('include') return local:handleIncludePi($item)
    case element(tei:teiHeader) return $item
    case element() return element { QName(namespace-uri($item), name($item)) } { for $n in $item/(@*|node()) return local:transform($n)}
    case document-node() return (comment {$caveatText}, local:transform($item/node()))
    default return $item 
};


let $s := db:open($dict-skel)

return local:transform($s)
    